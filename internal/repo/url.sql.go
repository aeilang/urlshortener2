// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: url.sql

package repo

import (
	"context"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (
    orignal_url,
    short_code,
    is_custom,
    expired_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, orignal_url, short_code, is_custom, created_at, expired_at
`

type CreateURLParams struct {
	OrignalUrl string
	ShortCode  string
	IsCustom   bool
	ExpiredAt  time.Time
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.OrignalUrl,
		arg.ShortCode,
		arg.IsCustom,
		arg.ExpiredAt,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OrignalUrl,
		&i.ShortCode,
		&i.IsCustom,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteExpiredURLs = `-- name: DeleteExpiredURLs :exec
DELETE FROM urls
WHERE expired_at <= CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredURLs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredURLs)
	return err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT id, orignal_url, short_code, is_custom, created_at, expired_at
FROM urls
WHERE short_code = $1 AND expired_at > CURRENT_TIMESTAMP
LIMIT 1
`

func (q *Queries) GetURLByShortCode(ctx context.Context, shortCode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortCode, shortCode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.OrignalUrl,
		&i.ShortCode,
		&i.IsCustom,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const isShortCodeAvaliable = `-- name: IsShortCodeAvaliable :one
SELECT NOT EXISTS (
    SELECT 1 FROM urls
    WHERE short_code = $1
) AS is_available
`

func (q *Queries) IsShortCodeAvaliable(ctx context.Context, shortCode string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isShortCodeAvaliable, shortCode)
	var is_available bool
	err := row.Scan(&is_available)
	return is_available, err
}
